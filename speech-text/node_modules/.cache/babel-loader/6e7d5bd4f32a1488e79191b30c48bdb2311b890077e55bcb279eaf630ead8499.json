{"ast":null,"code":"import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\nconst TextToSpeech = NativeModules.TextToSpeech;\nclass Tts extends NativeEventEmitter {\n  constructor() {\n    super(TextToSpeech);\n  }\n  getInitStatus() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.getInitStatus();\n  }\n  requestInstallEngine() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.requestInstallEngine();\n  }\n  requestInstallData() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.requestInstallData();\n  }\n  setDucking(enabled) {\n    if (Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.setDucking(enabled);\n  }\n  setDefaultEngine(engineName) {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.setDefaultEngine(engineName);\n  }\n  setDefaultVoice(voiceId) {\n    return TextToSpeech.setDefaultVoice(voiceId);\n  }\n  setDefaultRate(rate, skipTransform) {\n    return TextToSpeech.setDefaultRate(rate, !!skipTransform);\n  }\n  setDefaultPitch(pitch) {\n    return TextToSpeech.setDefaultPitch(pitch);\n  }\n  setDefaultLanguage(language) {\n    return TextToSpeech.setDefaultLanguage(language);\n  }\n  setIgnoreSilentSwitch(ignoreSilentSwitch) {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return TextToSpeech.setIgnoreSilentSwitch(ignoreSilentSwitch);\n    }\n    return Promise.resolve(true);\n  }\n  voices() {\n    return TextToSpeech.voices();\n  }\n  engines() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve([]);\n    }\n    return TextToSpeech.engines();\n  }\n  speak(utterance) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // compatibility with old-style voiceId argument passing\n    if (typeof options === 'string') {\n      if (Platform.OS === 'ios') {\n        return TextToSpeech.speak(utterance, {\n          iosVoiceId: options\n        });\n      } else {\n        return TextToSpeech.speak(utterance, {});\n      }\n    } else {\n      if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n        return TextToSpeech.speak(utterance, options);\n      } else {\n        return TextToSpeech.speak(utterance, options.androidParams || {});\n      }\n    }\n  }\n  stop(onWordBoundary) {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.stop(onWordBoundary);\n    } else {\n      return TextToSpeech.stop();\n    }\n  }\n  pause(onWordBoundary) {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.pause(onWordBoundary);\n    }\n    return Promise.resolve(false);\n  }\n  resume() {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.resume();\n    }\n    return Promise.resolve(false);\n  }\n  addEventListener(type, handler) {\n    return this.addListener(type, handler);\n  }\n  removeEventListener(type, handler) {\n    this.removeListener(type, handler);\n  }\n}\nexport default new Tts();","map":{"version":3,"names":["NativeModules","NativeEventEmitter","Platform","TextToSpeech","Tts","constructor","getInitStatus","OS","Promise","resolve","requestInstallEngine","requestInstallData","setDucking","enabled","setDefaultEngine","engineName","setDefaultVoice","voiceId","setDefaultRate","rate","skipTransform","setDefaultPitch","pitch","setDefaultLanguage","language","setIgnoreSilentSwitch","ignoreSilentSwitch","voices","engines","speak","utterance","options","iosVoiceId","androidParams","stop","onWordBoundary","pause","resume","addEventListener","type","handler","addListener","removeEventListener","removeListener"],"sources":["/Users/alliewu/Desktop/JS/speech-text/speech-text/node_modules/react-native-tts/index.js"],"sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\n\nconst TextToSpeech = NativeModules.TextToSpeech;\n\nclass Tts extends NativeEventEmitter {\n  constructor() {\n    super(TextToSpeech);\n  }\n\n  getInitStatus() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.getInitStatus();\n  }\n\n  requestInstallEngine() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.requestInstallEngine();\n  }\n\n  requestInstallData() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.requestInstallData();\n  }\n\n  setDucking(enabled) {\n    if (Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.setDucking(enabled);\n  }\n\n  setDefaultEngine(engineName) {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.setDefaultEngine(engineName);\n  }\n\n  setDefaultVoice(voiceId) {\n    return TextToSpeech.setDefaultVoice(voiceId);\n  }\n\n  setDefaultRate(rate, skipTransform) {\n    return TextToSpeech.setDefaultRate(rate, !!skipTransform);\n  }\n\n  setDefaultPitch(pitch) {\n    return TextToSpeech.setDefaultPitch(pitch);\n  }\n\n  setDefaultLanguage(language) {\n    return TextToSpeech.setDefaultLanguage(language);\n  }\n\n  setIgnoreSilentSwitch(ignoreSilentSwitch) {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return TextToSpeech.setIgnoreSilentSwitch(ignoreSilentSwitch);\n    }\n    return Promise.resolve(true);\n  }\n\n  voices() {\n    return TextToSpeech.voices();\n  }\n\n  engines() {\n    if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n      return Promise.resolve([]);\n    }\n    return TextToSpeech.engines();\n  }\n\n  speak(utterance, options = {}) {\n    // compatibility with old-style voiceId argument passing\n    if (typeof options === 'string') {\n      if (Platform.OS === 'ios') {\n        return TextToSpeech.speak(utterance, { iosVoiceId: options });\n      } else {\n        return TextToSpeech.speak(utterance, {});\n      }\n    } else {\n      if (Platform.OS === 'ios' || Platform.OS === 'windows') {\n        return TextToSpeech.speak(utterance, options);\n      } else {\n        return TextToSpeech.speak(utterance, options.androidParams || {});\n      }\n    }\n  }\n\n  stop(onWordBoundary) {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.stop(onWordBoundary);\n    } else {\n      return TextToSpeech.stop();\n    }\n  }\n\n  pause(onWordBoundary) {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.pause(onWordBoundary);\n    }\n    return Promise.resolve(false);\n  }\n\n  resume() {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.resume();\n    }\n    return Promise.resolve(false);\n  }\n\n  addEventListener(type, handler) {\n    return this.addListener(type, handler);\n  }\n\n  removeEventListener(type, handler) {\n    this.removeListener(type, handler);\n  }\n}\n\nexport default new Tts();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}