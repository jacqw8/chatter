{"ast":null,"code":"var _jsxFileName = \"/Users/alliewu/Desktop/JS/speech-text/speech-text/src/Dictaphone.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition/lib/SpeechRecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dictaphone = () => {\n  _s();\n  function newLine(words) {\n    var script = words[\"transcript\"];\n    var lines = \"\";\n    var spl = script.split(\" \");\n    // for (var i = 0; i < spl.length - 1; i++) {\n    //     lines += spl[i];\n    //     lines += \"\\n\";\n    // }\n    // console.log(lines);\n    return spl;\n  }\n  const commands = [{\n    command: 'reset',\n    callback: () => resetTranscript()\n  }, {\n    command: 'turn off',\n    callback: () => SpeechRecognition.stopListening()\n  }];\n  const {\n    transcript,\n    interimTranscript,\n    finalTranscript,\n    resetTranscript,\n    listening\n  } = useSpeechRecognition({\n    commands\n  });\n  useEffect(() => {\n    if (finalTranscript !== '') {\n      console.log(finalTranscript);\n    }\n  }, [interimTranscript, finalTranscript]);\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Your browser does not support speech recognition software!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this);\n  }\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    console.log('Your browser does not support speech recognition software!');\n  }\n  const listenContinuously = () => {\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: 'en'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"listening:\", ' ', listening ? 'on' : 'off']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: listenContinuously,\n          children: \"Listen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: SpeechRecognition.stopListening,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: resetTranscript,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: newLine({\n          transcript\n        }).map(word => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(Dictaphone, \"yzpiicG1fG7jcxveWA4vlxivXdI=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = Dictaphone;\nexport default Dictaphone;\nvar _c;\n$RefreshReg$(_c, \"Dictaphone\");","map":{"version":3,"names":["React","useEffect","useState","SpeechRecognition","useSpeechRecognition","Dictaphone","newLine","words","script","lines","spl","split","commands","command","callback","resetTranscript","stopListening","transcript","interimTranscript","finalTranscript","listening","console","log","browserSupportsSpeechRecognition","listenContinuously","startListening","continuous","language","map","word"],"sources":["/Users/alliewu/Desktop/JS/speech-text/speech-text/src/Dictaphone.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition/lib/SpeechRecognition';\n\nconst Dictaphone = () => {\n    function newLine(words) {\n        var script = words[\"transcript\"];\n        var lines = \"\";\n        var spl = script.split(\" \")\n        // for (var i = 0; i < spl.length - 1; i++) {\n        //     lines += spl[i];\n        //     lines += \"\\n\";\n        // }\n        // console.log(lines);\n        return spl;\n    }\n    const commands = [\n        {\n            command: 'reset',\n            callback: () => resetTranscript()\n        },\n\n        {\n            command: 'turn off',\n            callback: () => SpeechRecognition.stopListening()\n        },\n\n    ]\n    const {\n        transcript,\n        interimTranscript,\n        finalTranscript,\n        resetTranscript,\n        listening,\n    } = useSpeechRecognition({ commands });\n\n    useEffect(() => {\n        if (finalTranscript !== '') {\n            console.log(finalTranscript);\n        }\n    }, [interimTranscript, finalTranscript]);\n\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n        return <span>Your browser does not support speech recognition software!</span>\n    }\n\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n        console.log('Your browser does not support speech recognition software!');\n    }\n    const listenContinuously = () => {\n        SpeechRecognition.startListening({\n            continuous: true,\n            language: 'en',\n        });\n    };\n\n    return (\n        <div>\n            <div>\n                <span>\n                    listening:\n                    {' '}\n                    {listening ? 'on' : 'off'}\n                </span>\n                <div>\n                    <button type=\"button\" onClick={listenContinuously}>Listen</button>\n                    <button type=\"button\" onClick={SpeechRecognition.stopListening}>Stop</button>\n                    <button type=\"button\" onClick={resetTranscript}>Reset</button>\n                </div>\n            </div>\n            <div>\n                <span>{transcript}</span>\n            </div>\n            <div>\n                <span>{newLine({ transcript }).map(word => (\n                    <p>\n                        {word}\n                    </p>\n                ))}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Dictaphone;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,iBAAiB,IAAIC,oBAAoB,QAAQ,gDAAgD;AAAC;AAEzG,MAAMC,UAAU,GAAG,MAAM;EAAA;EACrB,SAASC,OAAO,CAACC,KAAK,EAAE;IACpB,IAAIC,MAAM,GAAGD,KAAK,CAAC,YAAY,CAAC;IAChC,IAAIE,KAAK,GAAG,EAAE;IACd,IAAIC,GAAG,GAAGF,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC;IAC3B;IACA;IACA;IACA;IACA;IACA,OAAOD,GAAG;EACd;EACA,MAAME,QAAQ,GAAG,CACb;IACIC,OAAO,EAAE,OAAO;IAChBC,QAAQ,EAAE,MAAMC,eAAe;EACnC,CAAC,EAED;IACIF,OAAO,EAAE,UAAU;IACnBC,QAAQ,EAAE,MAAMX,iBAAiB,CAACa,aAAa;EACnD,CAAC,CAEJ;EACD,MAAM;IACFC,UAAU;IACVC,iBAAiB;IACjBC,eAAe;IACfJ,eAAe;IACfK;EACJ,CAAC,GAAGhB,oBAAoB,CAAC;IAAEQ;EAAS,CAAC,CAAC;EAEtCX,SAAS,CAAC,MAAM;IACZ,IAAIkB,eAAe,KAAK,EAAE,EAAE;MACxBE,OAAO,CAACC,GAAG,CAACH,eAAe,CAAC;IAChC;EACJ,CAAC,EAAE,CAACD,iBAAiB,EAAEC,eAAe,CAAC,CAAC;EAExC,IAAI,CAAChB,iBAAiB,CAACoB,gCAAgC,EAAE,EAAE;IACvD,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAuE;EAClF;EAEA,IAAI,CAACpB,iBAAiB,CAACoB,gCAAgC,EAAE,EAAE;IACvDF,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC;EAC7E;EACA,MAAME,kBAAkB,GAAG,MAAM;IAC7BrB,iBAAiB,CAACsB,cAAc,CAAC;MAC7BC,UAAU,EAAE,IAAI;MAChBC,QAAQ,EAAE;IACd,CAAC,CAAC;EACN,CAAC;EAED,oBACI;IAAA,wBACI;MAAA,wBACI;QAAA,yBAEK,GAAG,EACHP,SAAS,GAAG,IAAI,GAAG,KAAK;MAAA;QAAA;QAAA;QAAA;MAAA,QACtB,eACP;QAAA,wBACI;UAAQ,IAAI,EAAC,QAAQ;UAAC,OAAO,EAAEI,kBAAmB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAgB,eAClE;UAAQ,IAAI,EAAC,QAAQ;UAAC,OAAO,EAAErB,iBAAiB,CAACa,aAAc;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAc,eAC7E;UAAQ,IAAI,EAAC,QAAQ;UAAC,OAAO,EAAED,eAAgB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAe;MAAA;QAAA;QAAA;QAAA;MAAA,QAC5D;IAAA;MAAA;MAAA;MAAA;IAAA,QACJ,eACN;MAAA,uBACI;QAAA,UAAOE;MAAU;QAAA;QAAA;QAAA;MAAA;IAAQ;MAAA;MAAA;MAAA;IAAA,QACvB,eACN;MAAA,uBACI;QAAA,UAAOX,OAAO,CAAC;UAAEW;QAAW,CAAC,CAAC,CAACW,GAAG,CAACC,IAAI,iBACnC;UAAA,UACKA;QAAI;UAAA;UAAA;UAAA;QAAA,QAEZ;MAAC;QAAA;QAAA;QAAA;MAAA;IAAQ;MAAA;MAAA;MAAA;IAAA,QACR;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEd,CAAC;AAAC,GA9EIxB,UAAU;EAAA,QA8BRD,oBAAoB;AAAA;AAAA,KA9BtBC,UAAU;AAgFhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}