{"ast":null,"code":"var _jsxFileName = \"/Users/alliewu/Desktop/JS/speech-text/speech-text/src/Dictaphone.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition/lib/SpeechRecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dictaphone(_ref) {\n  _s();\n  let {\n    socket,\n    username,\n    room\n  } = _ref;\n  const commands = [{\n    command: 'reset',\n    callback: () => resetTranscript()\n  }, {\n    command: 'turn off',\n    callback: () => SpeechRecognition.stopListening()\n  }];\n  const {\n    transcript,\n    interimTranscript,\n    finalTranscript,\n    resetTranscript,\n    listening\n  } = useSpeechRecognition({\n    commands\n  });\n  const [messageList, setMessageList] = useState([]);\n  useEffect(() => {\n    if (finalTranscript !== '') {\n      console.log(finalTranscript);\n    }\n  }, [interimTranscript, finalTranscript]);\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Your browser does not support speech recognition software!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this);\n  }\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    console.log('Your browser does not support speech recognition software!');\n  }\n  const listenContinuously = () => {\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: 'en'\n    });\n    // const messageData = {\n    //     room: room,\n    //     author: username,\n    //     message: finalTranscript\n    // }\n    // sendMessage()\n    console.log(transcript);\n    // await socket.emit(\"send_voice\", messageData);\n  };\n\n  if (listening) {\n    const messageData = {\n      room: room,\n      author: username,\n      message: finalTranscript\n    };\n    socket.emit(\"send_voice\", messageData);\n  }\n  useEffect(() => {\n    socket.on(\"receive_voice\", data => {\n      setMessageList(list => [...list, data]);\n      console.log(data);\n      console.log(messageList);\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"listening:\", ' ', listening ? 'on' : 'off']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: listenContinuously,\n          children: \"Listen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: SpeechRecognition.stopListening,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: resetTranscript,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-body\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(Dictaphone, \"KMBhsSv16youQcfNrtC4I7bGVhI=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = Dictaphone;\n;\nexport default Dictaphone;\nvar _c;\n$RefreshReg$(_c, \"Dictaphone\");","map":{"version":3,"names":["React","useEffect","useState","SpeechRecognition","useSpeechRecognition","Dictaphone","socket","username","room","commands","command","callback","resetTranscript","stopListening","transcript","interimTranscript","finalTranscript","listening","messageList","setMessageList","console","log","browserSupportsSpeechRecognition","listenContinuously","startListening","continuous","language","messageData","author","message","emit","on","data","list"],"sources":["/Users/alliewu/Desktop/JS/speech-text/speech-text/src/Dictaphone.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition/lib/SpeechRecognition';\n\nfunction Dictaphone({ socket, username, room }) {\n\n    const commands = [\n        {\n            command: 'reset',\n            callback: () => resetTranscript()\n        },\n\n        {\n            command: 'turn off',\n            callback: () => SpeechRecognition.stopListening()\n        },\n\n    ]\n    const {\n        transcript,\n        interimTranscript,\n        finalTranscript,\n        resetTranscript,\n        listening,\n    } = useSpeechRecognition({ commands });\n\n    const [messageList, setMessageList] = useState([]);\n\n    useEffect(() => {\n        if (finalTranscript !== '') {\n            console.log(finalTranscript);\n        }\n    }, [interimTranscript, finalTranscript]);\n\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n        return <span>Your browser does not support speech recognition software!</span>\n    }\n\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n        console.log('Your browser does not support speech recognition software!');\n    }\n    const listenContinuously = () => {\n        SpeechRecognition.startListening({\n            continuous: true,\n            language: 'en',\n        });\n        // const messageData = {\n        //     room: room,\n        //     author: username,\n        //     message: finalTranscript\n        // }\n        // sendMessage()\n        console.log(transcript);\n        // await socket.emit(\"send_voice\", messageData);\n    };\n\n    if (listening) {\n        const messageData = {\n            room: room,\n            author: username,\n            message: finalTranscript\n        }\n        socket.emit(\"send_voice\", messageData);\n    }\n\n    useEffect(() => {\n        socket.on(\"receive_voice\", (data) => {\n            setMessageList((list) => [...list, data]);\n            console.log(data);\n            console.log(messageList);\n        });\n    }, [socket]);\n\n    return (\n        <div>\n            <div>\n                <span>\n                    listening:\n                    {' '}\n                    {listening ? 'on' : 'off'}\n                </span>\n                <div>\n                    <button type=\"button\" onClick={listenContinuously}>Listen</button>\n                    <button type=\"button\" onClick={SpeechRecognition.stopListening}>Stop</button>\n                    <button type=\"button\" onClick={resetTranscript}>Reset</button>\n                </div>\n            </div>\n            <div>\n                <span>{transcript}</span>\n            </div>\n            <div className='chat-body'>\n                {/* {messageList.map((messageContent) => {\n                    return (\n                        <p>{messageContent.message}</p>\n                    )\n                })} */}\n            </div>\n        </div>\n    );\n};\n\nexport default Dictaphone;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}